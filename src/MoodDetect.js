import {Alert, Linking} from 'react-native';
import Spotify from 'rn-spotify-sdk';
import moment from 'moment/moment';

export const playlistFromImage = (data) => {

  let moods = data[0].faceAttributes.emotion;
  moods = Object.assign({},
      ...Object.keys(moods).map(k => ({[k]: parseFloat(moods[k])})));
  const arr = Object.values(moods);
  const max = Math.max(...arr);
  const currentMood = Object.keys(moods).find(key => moods[key] === max);

  const energy = (
      (0.79 * moods.anger) + //angry
      (-0.03 * moods.contempt) + // disappointed
      (-0.37 * moods.disgust) + // uncomfortable
      (0.79 * moods.fear) + // afraid
      (0.17 * moods.happiness) + // happy
      (-0.12 * moods.neutral) + // apathetic
      (-0.40 * moods.sadness) + // sad
      +1
  ) / 2.0;

  console.log(energy);

  const valence = (
      (-0.40 * moods.anger) + //angry
      (-0.80 * moods.contempt) + // disappointed
      (-0.68 * moods.disgust) + // uncomfortable
      (0.12 * moods.fear) + // afraid
      (0.89 * moods.happiness) + // happy
      (-0.20 * moods.neutral) + // apathetic
      (-0.81 * moods.sadness) + // sad
      (1 * moods.surprise)
      + 1
  ) / 2.0;
  console.log(valence);

  SpotifyGetPlaylist(energy, valence, currentMood);
};

export const playlistFromAudio = (data) => {
  const moods = Object.assign({},
      ...Object.keys(data).map(k => ({[k]: parseFloat(data[k])})));
  const arr = Object.values(moods);
  const max = Math.max(...arr);
  const currentMood = Object.keys(moods).find(key => moods[key] === max);

  const energy = (
      (0.79 * moods.anger) + //angry
      (0.79 * moods.fear) + // afraid
      (0.17 * moods.happiness) + // happy
      (-0.12 * moods.neutral) + // apathetic
      (-0.40 * moods.sadness) + // sad
      +1
  ) / 2.0;

  console.log(energy);

  const valence = (
      (-0.40 * moods.anger) + //angry
      (0.12 * moods.fear) + // afraid
      (0.89 * moods.happiness) + // happy
      (-0.20 * moods.neutral) + // apathetic
      (-0.81 * moods.sadness) + // sad
      +1
  ) / 2.0;
  console.log(valence);

  SpotifyGetPlaylist(energy, valence, currentMood);
};

function SpotifyGetPlaylist(energy, valence, currentMood) {
  Spotify.sendRequest('v1/me/top/artists', 'GET', {limit: 50},
      false).then((responseJson) => {
    console.log(responseJson);

    let artistIDs = responseJson.items.map(item => item.id);
    let artists = '';

    for (let step = 0, step2 = 0; step < 5 && step2 < 50; step2++) {
      if (Math.round(Math.random())) {
        artists = artists + artistIDs[step2] + ',';
        step++;
      }
    }
    console.log(artists);

    Spotify.sendRequest('v1/recommendations', 'GET', {
          'seed_artists': artists,
          'target_energy': energy,
          'target_valence': valence,
        },
        false).then((responseJson) => {
      console.log(responseJson);
      SpotifyCreatePlaylist(responseJson.tracks.map(track => track.uri),
          currentMood);
    }).catch((error) => {
      console.error(error);
    });
  }).catch((error) => {
    console.error(error);
  });
  return {};
}

function SpotifyCreatePlaylist(uris, currentMood) {
  Spotify.getMe().then((user) => {
    Spotify.sendRequest('v1/users/' + user.id + '/playlists', 'POST', {
      name: currentMood + ':' + moment().format('LLL'),
      description: 'Generated by Moodio',
      public: true,
    }, true).then((playlist) => {
      Spotify.sendRequest('v1/playlists/' + playlist.id + '/tracks', 'POST', {
        uris: uris,
      }, true).then(() => {
        Linking.openURL('https://open.spotify.com/playlist/' + playlist.id);
      }).catch((error) => {
        Alert.alert('Error1', error.message);
      });
    }).catch((error) => {
      Alert.alert('Error2', error.message);
    });
  }).catch((error) => {
    Alert.alert('Error3', error.message);
  });
}

